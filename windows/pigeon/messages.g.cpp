// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace windows_store {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// StoreAppLicense

StoreAppLicense::StoreAppLicense(
  bool is_active,
  bool is_trial,
  const std::string& sku_store_id,
  const std::string& trial_unique_id,
  int64_t trial_time_remaining)
 : is_active_(is_active),
    is_trial_(is_trial),
    sku_store_id_(sku_store_id),
    trial_unique_id_(trial_unique_id),
    trial_time_remaining_(trial_time_remaining) {}

bool StoreAppLicense::is_active() const {
  return is_active_;
}

void StoreAppLicense::set_is_active(bool value_arg) {
  is_active_ = value_arg;
}


bool StoreAppLicense::is_trial() const {
  return is_trial_;
}

void StoreAppLicense::set_is_trial(bool value_arg) {
  is_trial_ = value_arg;
}


const std::string& StoreAppLicense::sku_store_id() const {
  return sku_store_id_;
}

void StoreAppLicense::set_sku_store_id(std::string_view value_arg) {
  sku_store_id_ = value_arg;
}


const std::string& StoreAppLicense::trial_unique_id() const {
  return trial_unique_id_;
}

void StoreAppLicense::set_trial_unique_id(std::string_view value_arg) {
  trial_unique_id_ = value_arg;
}


int64_t StoreAppLicense::trial_time_remaining() const {
  return trial_time_remaining_;
}

void StoreAppLicense::set_trial_time_remaining(int64_t value_arg) {
  trial_time_remaining_ = value_arg;
}


EncodableList StoreAppLicense::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(is_active_));
  list.push_back(EncodableValue(is_trial_));
  list.push_back(EncodableValue(sku_store_id_));
  list.push_back(EncodableValue(trial_unique_id_));
  list.push_back(EncodableValue(trial_time_remaining_));
  return list;
}

StoreAppLicense StoreAppLicense::FromEncodableList(const EncodableList& list) {
  StoreAppLicense decoded(
    std::get<bool>(list[0]),
    std::get<bool>(list[1]),
    std::get<std::string>(list[2]),
    std::get<std::string>(list[3]),
    list[4].LongValue());
  return decoded;
}


WindowsStoreApiCodecSerializer::WindowsStoreApiCodecSerializer() {}

EncodableValue WindowsStoreApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(StoreAppLicense::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void WindowsStoreApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(StoreAppLicense)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<StoreAppLicense>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by WindowsStoreApi.
const flutter::StandardMessageCodec& WindowsStoreApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&WindowsStoreApiCodecSerializer::GetInstance());
}

// Sets up an instance of `WindowsStoreApi` to handle messages through the `binary_messenger`.
void WindowsStoreApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  WindowsStoreApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.windows_store.WindowsStoreApi.getAppLicenseAsync", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->GetAppLicenseAsync([reply](ErrorOr<StoreAppLicense>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue WindowsStoreApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue WindowsStoreApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace windows_store
